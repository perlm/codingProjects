to$ConsecutiveWins <- as.numeric(to$ConsecutiveWins)
to$holdout <- runif(nrow(to)) > 0.7
train.data <- to[!to$holdout, ]
validate.data <- to[to$holdout, ]
f <- formula(Outcome ~ ConsecutiveWins + TotalDollars + PrevDollars + Gender + age_bucket +
ConsecutiveWins:TotalDollars + ConsecutiveWins:Gender + ConsecutiveWins:Gender +
age_bucket:Gender + ConsecutiveWins:ConsecutiveWins + TotalDollars:TotalDollars,data=to)
mm <- sparse.model.matrix(f, data=train.data)
cvmn <- cv.glmnet(mm[,-1], train.data$Outcome, family="binomial", standardize=TRUE, nlambda=50,
type.measure="auc", nfold=10,maxit=10000)
plot(cvmn)
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
#0.59
# predict for holdout
mm <- model.matrix(f, data=validate.data)
calc_AUC(validate.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "FALSE")
#0.60
# predict for whole set
mm <- model.matrix(f, data=df)
df$pred <- predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min")
# now have some fun
temp <- df[c('date','Name','pred')]
#temp2 <- dcast(temp,date~Name, value.var="pred")
#ts <- as.xts(temp2[,-1], order.by=as.Date(temp2$date))
#dygraph(ts,main="Model Prediction over Time") %>% dyHighlight(highlightSeriesBackgroundAlpha = 0.5, highlightCircleSize = 0, highlightSeriesOpts = list(strokeWidth = 5),hideOnMouseOut = FALSE) %>% dyLegend(show = "onmouseover")
ts <- as.xts(temp, order.by=as.Date(temp$date))
head(ts)
temp2 <- dcast(temp,date~Name, value.var="pred")
ts <- as.xts(temp2, order.by=as.Date(temp2$date))
temp <- df[c('date','Name','pred')]
ggplot(date=temp,aes(x=date,y=pred,color=Name))+
geom_line() + xlab('Date') + ylab('Predicted Win Prob')
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
ggplot(date=temp,aes(x=date,y=pred,color=Name))+
geom_line() + xlab('Date') + ylab('Predicted Win Prob')
head(temp)
sapply(temp,class)
temp$date <- as.date(temp$date)
temp$date <- as.Date(temp$date)
head(temp$date)
temp$pred <- as.numeric(temp$pred)
sapply(temp,class)
ggplot(date=temp,aes(x=date,y=pred,color=Name))+
geom_line() + xlab('Date') + ylab('Predicted Win Prob')
head(temp)
ggplot(data=temp,aes(x=date,y=pred,color=Name))+
geom_line() + xlab('Date') + ylab('Predicted Win Prob')
ggplot(data=temp,aes(x=date,y=pred,color=Name))+
geom_line() + xlab('Date') + ylab('Predicted Win Prob')+scale_colour_discrete(guide=FALSE)
ggplot(data=temp,aes(x=date,y=pred,color=Name))+ggtitle('30 Years of Jeopardy!')
geom_line(size=3,alpha=0.75) + xlab('Date') + ylab('Predicted Win Prob')+scale_colour_discrete(guide=FALSE)
ggplot(data=temp,aes(x=date,y=pred,color=Name))+ggtitle('30 Years of Jeopardy!')+
geom_line(size=3,alpha=0.75) + xlab('Date') + ylab('Predicted Win Prob')+scale_colour_discrete(guide=FALSE)
ggplot(data=temp,aes(x=date,y=pred,color=Name))+ggtitle('30 Years of Jeopardy!')+
geom_line(size=2,alpha=0.75) + xlab('Date') + ylab('Predicted Win Prob')+scale_colour_discrete(guide=FALSE)
ggplot(data=temp,aes(x=date,y=pred,color=Name))+ggtitle('30 Years of Jeopardy!')+
geom_line(size=1,alpha=0.75) + xlab('Date') + ylab('Predicted Win Prob')+scale_colour_discrete(guide=FALSE)
temp
View(temp)
setwd("/home/jason/Desktop/Dropbox/personal/jeopardy/predicting")
library(ROCR)
library(ggplot2)
library(glmnet)
#library(reshape2)
#library(Hmisc)
library(dygraphs)
library(xts)
library(reshape2)
calc_AUC <- function(obs, pred, plotROC=FALSE) {
roc.pred<-prediction(pred, obs)
if (plotROC) {
roc.perf <- performance(roc.pred, measure="tpr", x.measure="fpr")
plot(roc.perf)
abline(a=0,b=1)
}
return(performance(roc.pred, "auc")@y.values[[1]])
}
#df = read.table("data/raw.data", header=FALSE, sep=" ", quote='', nrows=250000)
df = read.table("data/raw.data.backup", header=FALSE, sep=",", quote='', nrows=250000)
colnames(df) <- c("index", "gameID","date","ConsecutiveWins","TotalDollars","Outcome","PrevDollars","Gender","Age","Name","Occuppation","Location")
# in raw data 1 is win, 2 is fail
df$Outcome[df$Outcome==2]<-0
df$ave <- df$TotalDollars/df$ConsecutiveWins
df$TotalDollars_buckets[df$TotalDollars<=15000] <- 'lt15k'
df$TotalDollars_buckets[df$TotalDollars>15000 & df$TotalDollars<=35000] <- '15-35k'
df$TotalDollars_buckets[df$TotalDollars>35000 & df$TotalDollars<=75000] <- '35-75k'
df$TotalDollars_buckets[df$TotalDollars>75000 & df$TotalDollars<=150000] <- '75-150k'
df$TotalDollars_buckets[df$TotalDollars>150000] <- 'gt150k'
df$age_bucket[df$Age<=25] <- 'lt25'
df$age_bucket[df$Age>25 & df$Age<=35] <- '25-35'
df$age_bucket[df$Age>35 & df$Age<=45] <- '35-45'
df$age_bucket[df$Age>45 & df$Age<=55] <- '45-55'
df$age_bucket[df$Age>55] <- 'gt55'
mean(as.numeric(df$Outcome))
aggregate(df$Outcome, list(Condition=df$ConsecutiveWins), length)
aggregate(df$Outcome, list(Condition=df$ConsecutiveWins), mean)
aggregate(df$Outcome, list(Condition=df$TotalDollars), length)
aggregate(df$Outcome, list(Condition=df$TotalDollars), mean)
aggregate(df$Outcome, list(Condition=df$TotalDollars_buckets), length)
aggregate(df$Outcome, list(Condition=df$TotalDollars_buckets), mean)
aggregate(df$Outcome, list(Condition=df$age_bucket), length)
aggregate(df$Outcome, list(Condition=df$age_bucket), mean)
df$TotalDollars_buckets <- as.factor(df$TotalDollars_buckets)
df$age_bucket <- as.factor(df$age_bucket)
r <- names(df) %in% c('index','gameID','date','Name','pred')
to <- df[!r]
sapply(to,function(x)length(levels(as.factor(x))))
bad <- sapply(to,function(x)length(levels(as.factor(x)))<2)
to <- to[!bad]
to$ConsecutiveWins[to$ConsecutiveWins>=10]<-10
#to$ConsecutiveWins <- as.factor(to$ConsecutiveWins)
to$ConsecutiveWins <- as.numeric(to$ConsecutiveWins)
to$holdout <- runif(nrow(to)) > 0.7
train.data <- to[!to$holdout, ]
validate.data <- to[to$holdout, ]
f <- formula(Outcome ~ ConsecutiveWins + TotalDollars + PrevDollars + Gender + age_bucket +
ConsecutiveWins:TotalDollars + ConsecutiveWins:Gender + ConsecutiveWins:Gender +
age_bucket:Gender + ConsecutiveWins:ConsecutiveWins + TotalDollars:TotalDollars,data=to)
mm <- sparse.model.matrix(f, data=train.data)
cvmn <- cv.glmnet(mm[,-1], train.data$Outcome, family="binomial", standardize=TRUE, nlambda=50,
type.measure="auc", nfold=10,maxit=10000)
plot(cvmn)
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
#0.59
# predict for holdout
mm <- model.matrix(f, data=validate.data)
calc_AUC(validate.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "FALSE")
#0.60
# predict for whole set
mm <- model.matrix(f, data=df)
df$pred <- predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min")
# now have some fun
temp <- df[c('date','Name','pred')]
temp$date <- as.Date(temp$date)
temp$pred <- as.numeric(temp$pred)
#ts <- as.xts(temp, order.by=as.Date(temp$date))
#temp2 <- dcast(temp,date~Name, value.var="pred")
#ts <- as.xts(temp2, order.by=as.Date(temp2$date))
ggplot(data=temp,aes(x=date,y=pred,color=Name))+ggtitle('30 Years of Jeopardy!')+
geom_line(size=1,alpha=0.75) + xlab('Date') + ylab('Predicted Win Prob')+scale_colour_discrete(guide=FALSE)
#dygraph(ts,main="Model Prediction over Time") %>% dyHighlight(highlightSeriesBackgroundAlpha = 0.5, highlightCircleSize = 0, highlightSeriesOpts = list(strokeWidth = 5),hideOnMouseOut = FALSE) %>% dyLegend(show = "onmouseover")
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
calc_AUC(validate.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "FALSE")
mm <- model.matrix(f, data=validate.data)
calc_AUC(validate.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "FALSE")
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
mm <- sparse.model.matrix(f, data=train.data)
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
temp
mm <- sparse.model.matrix(f, data=train.data)
cvmn <- cv.glmnet(mm[,-1], train.data$Outcome, family="binomial", standardize=TRUE, nlambda=50,
type.measure="auc", nfold=5,maxit=10000)
plot(cvmn)
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
#0.59
# predict for holdout
mm <- model.matrix(f, data=validate.data)
calc_AUC(validate.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "FALSE")
#0.60
sapply(df,class)
f <- formula(Outcome ~ ConsecutiveWins + TotalDollars + PrevDollars + Gender + age_bucket +
ConsecutiveWins:TotalDollars + ConsecutiveWins:Gender + ConsecutiveWins:Gender +
age_bucket:Gender + ConsecutiveWins*ConsecutiveWins + TotalDollars*TotalDollars,data=to)
mm <- sparse.model.matrix(f, data=train.data)
cvmn <- cv.glmnet(mm[,-1], train.data$Outcome, family="binomial", standardize=TRUE, nlambda=50,
type.measure="auc", nfold=5,maxit=10000)
plot(cvmn)
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
#0.59
f <- formula(Outcome ~ ConsecutiveWins + TotalDollars_buckets + PrevDollars + Gender + age_bucket +
ConsecutiveWins:TotalDollars + ConsecutiveWins:Gender + ConsecutiveWins:Gender +
age_bucket:Gender + poly(ConsecutiveWins,2),data=to)
mm <- sparse.model.matrix(f, data=train.data)
cvmn <- cv.glmnet(mm[,-1], train.data$Outcome, family="binomial", standardize=TRUE, nlambda=50,
type.measure="auc", nfold=5,maxit=10000)
plot(cvmn)
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
df$PrevDollars
ggplot()+geom_history(data=df,aes(PrevDollars))
ggplot()+geom_histogram(data=df,aes(PrevDollars))
df$PrevDollars_buckets[df$PrevDollars<=5000] <- 'lt5k'
df$PrevDollars_buckets[df$PrevDollars>5000 & df$PrevDollars<=15000] <- '5-15k'
df$PrevDollars_buckets[df$PrevDollars>15000 & df$PrevDollars<=25000] <- '15-25k'
df$PrevDollars_buckets[df$PrevDollars>25000 & df$PrevDollars<=35000] <- '25-35k'
df$PrevDollars_buckets[df$PrevDollars>35000] <- 'gt35k'
df$PrevDollars_buckets <- as.factor(df$PrevDollars_buckets)
r <- names(df) %in% c('index','gameID','date','Name','pred')
to <- df[!r]
sapply(to,function(x)length(levels(as.factor(x))))
bad <- sapply(to,function(x)length(levels(as.factor(x)))<2)
to <- to[!bad]
to$ConsecutiveWins[to$ConsecutiveWins>=10]<-10
#to$ConsecutiveWins <- as.factor(to$ConsecutiveWins)
to$ConsecutiveWins <- as.numeric(to$ConsecutiveWins)
r <- names(df) %in% c('index','gameID','date','Name','pred')
to <- df[!r]
sapply(to,function(x)length(levels(as.factor(x))))
bad <- sapply(to,function(x)length(levels(as.factor(x)))<2)
to <- to[!bad]
to$ConsecutiveWins[to$ConsecutiveWins>=10]<-10
#to$ConsecutiveWins <- as.factor(to$ConsecutiveWins)
to$ConsecutiveWins <- as.numeric(to$ConsecutiveWins)
to$holdout <- runif(nrow(to)) > 0.7
train.data <- to[!to$holdout, ]
validate.data <- to[to$holdout, ]
f <- formula(Outcome ~ ConsecutiveWins + TotalDollars_buckets + PrevDollars_buckets + Gender + age_bucket +
ConsecutiveWins:TotalDollars + ConsecutiveWins:Gender + ConsecutiveWins:Gender +
age_bucket:Gender + poly(ConsecutiveWins,2),data=to)
mm <- sparse.model.matrix(f, data=train.data)
cvmn <- cv.glmnet(mm[,-1], train.data$Outcome, family="binomial", standardize=TRUE, nlambda=50,
type.measure="auc", nfold=5,maxit=10000)
plot(cvmn)
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
f <- formula(Outcome ~ ConsecutiveWins + TotalDollars_buckets + PrevDollars_buckets + Gender + age_bucket +
ConsecutiveWins:TotalDollars + ConsecutiveWins:Gender +
age_bucket:Gender + poly(ConsecutiveWins,2),data=to)
mm <- sparse.model.matrix(f, data=train.data)
cvmn <- cv.glmnet(mm[,-1], train.data$Outcome, family="binomial", standardize=TRUE, nlambda=50,
type.measure="auc", nfold=5,maxit=10000)
plot(cvmn)
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
#0.60
# predict for holdout
mm <- model.matrix(f, data=validate.data)
calc_AUC(validate.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "FALSE")
#0.60
# predict for whole set
mm <- model.matrix(f, data=df)
df$pred <- predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min")
# now have some fun
temp <- df[c('date','Name','pred')]
temp$date <- as.Date(temp$date)
temp$pred <- as.numeric(temp$pred)
#ts <- as.xts(temp, order.by=as.Date(temp$date))
#temp2 <- dcast(temp,date~Name, value.var="pred")
#ts <- as.xts(temp2, order.by=as.Date(temp2$date))
ggplot(data=temp,aes(x=date,y=pred,color=Name))+ggtitle('30 Years of Jeopardy!')+
geom_line(size=1,alpha=0.75) + xlab('Date') + ylab('Predicted Win Prob')+scale_colour_discrete(guide=FALSE)
f <- formula(Outcome ~ ConsecutiveWins + TotalDollars_buckets + PrevDollars_buckets + Gender + age_bucket +
ConsecutiveWins:TotalDollars_buckets + ConsecutiveWins:Gender +
age_bucket:Gender + poly(ConsecutiveWins,2),data=to)
mm <- sparse.model.matrix(f, data=train.data)
cvmn <- cv.glmnet(mm[,-1], train.data$Outcome, family="binomial", standardize=TRUE, nlambda=50,
type.measure="auc", nfold=5,maxit=10000)
plot(cvmn)
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
#0.60
f <- formula(Outcome ~ ConsecutiveWins + TotalDollars_buckets + PrevDollars_buckets + Gender + age_bucket +
ConsecutiveWins:TotalDollars_buckets + ConsecutiveWins:Gender +
age_bucket:Gender + poly(ConsecutiveWins,3),data=to)
mm <- sparse.model.matrix(f, data=train.data)
cvmn <- cv.glmnet(mm[,-1], train.data$Outcome, family="binomial", standardize=TRUE, nlambda=50,
type.measure="auc", nfold=5,maxit=10000)
plot(cvmn)
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
r <- names(df) %in% c('index','gameID','date','Name','pred')
to <- df[!r]
sapply(to,function(x)length(levels(as.factor(x))))
bad <- sapply(to,function(x)length(levels(as.factor(x)))<2)
to <- to[!bad]
#to$ConsecutiveWins[to$ConsecutiveWins>=10]<-10
#to$ConsecutiveWins <- as.factor(to$ConsecutiveWins)
to$ConsecutiveWins <- as.numeric(to$ConsecutiveWins)
to$holdout <- runif(nrow(to)) > 0.7
train.data <- to[!to$holdout, ]
validate.data <- to[to$holdout, ]
f <- formula(Outcome ~ ConsecutiveWins + TotalDollars_buckets + PrevDollars_buckets + Gender + age_bucket +
ConsecutiveWins:TotalDollars_buckets + ConsecutiveWins:Gender +
age_bucket:Gender + poly(ConsecutiveWins,3),data=to)
mm <- sparse.model.matrix(f, data=train.data)
cvmn <- cv.glmnet(mm[,-1], train.data$Outcome, family="binomial", standardize=TRUE, nlambda=50,
type.measure="auc", nfold=5,maxit=10000)
plot(cvmn)
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
mm <- model.matrix(f, data=validate.data)
calc_AUC(validate.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "FALSE")
#0.62
# predict for whole set
mm <- model.matrix(f, data=df)
df$pred <- predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min")
mm <- model.matrix(f, data=df)
df$pred <- predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min")
# now have some fun
temp <- df[c('date','Name','pred')]
temp$date <- as.Date(temp$date)
temp$pred <- as.numeric(temp$pred)
#ts <- as.xts(temp, order.by=as.Date(temp$date))
#temp2 <- dcast(temp,date~Name, value.var="pred")
#ts <- as.xts(temp2, order.by=as.Date(temp2$date))
ggplot(data=temp,aes(x=date,y=pred,color=Name))+ggtitle('30 Years of Jeopardy!')+
geom_line(size=1,alpha=0.75) + xlab('Date') + ylab('Predicted Win Prob')+scale_colour_discrete(guide=FALSE)
setwd("/home/jason/Desktop/Dropbox/personal/jeopardy/predicting")
library(ROCR)
library(ggplot2)
library(glmnet)
library(dygraphs)
library(xts)
library(reshape2)
calc_AUC <- function(obs, pred, plotROC=FALSE) {
roc.pred<-prediction(pred, obs)
if (plotROC) {
roc.perf <- performance(roc.pred, measure="tpr", x.measure="fpr")
plot(roc.perf)
abline(a=0,b=1)
}
return(performance(roc.pred, "auc")@y.values[[1]])
}
df = read.table("data/raw.data", header=FALSE, sep=" ", quote='', nrows=250000)
colnames(df) <- c("index", "gameID","date","ConsecutiveWins","TotalDollars","Outcome","PrevDollars","Gender","Age","Name","Occuppation","Location")
df = read.table("data/raw.data", header=FALSE, sep=",", quote='', nrows=250000)
head(df)
colnames(df) <- c("index", "gameID","date","ConsecutiveWins","TotalDollars","Outcome","PrevDollars","Gender","Age","Name","Occuppation","Location")
head(df)
df$Outcome[df$Outcome==2]<-0
df$ave <- df$TotalDollars/df$ConsecutiveWins
head(df$ave)
df$ave <- df$TotalDollars/df$ConsecutiveWins
df$TotalDollars_buckets[df$TotalDollars<=15000] <- 'lt15k'
df$TotalDollars_buckets[df$TotalDollars>15000 & df$TotalDollars<=35000] <- '15-35k'
df$TotalDollars_buckets[df$TotalDollars>35000 & df$TotalDollars<=75000] <- '35-75k'
df$TotalDollars_buckets[df$TotalDollars>75000 & df$TotalDollars<=150000] <- '75-150k'
df$TotalDollars_buckets[df$TotalDollars>150000] <- 'gt150k'
df$PrevDollars_buckets[df$PrevDollars<=5000] <- 'lt5k'
df$PrevDollars_buckets[df$PrevDollars>5000 & df$PrevDollars<=15000] <- '5-15k'
df$PrevDollars_buckets[df$PrevDollars>15000 & df$PrevDollars<=25000] <- '15-25k'
df$PrevDollars_buckets[df$PrevDollars>25000 & df$PrevDollars<=35000] <- '25-35k'
df$PrevDollars_buckets[df$PrevDollars>35000] <- 'gt35k'
df$age_bucket[df$Age<=25] <- 'lt25'
df$age_bucket[df$Age>25 & df$Age<=35] <- '25-35'
df$age_bucket[df$Age>35 & df$Age<=45] <- '35-45'
df$age_bucket[df$Age>45 & df$Age<=55] <- '45-55'
df$age_bucket[df$Age>55] <- 'gt55'
######
# Jeopary Model
# Goal is to predict probability that returning champ will win match on jeopardy given the information in the Jeopardy archive.
# http://j-archive.com/
########
setwd("/home/jason/Desktop/Dropbox/personal/jeopardy/predicting")
library(ROCR)
library(ggplot2)
library(glmnet)
library(dygraphs)
library(xts)
library(reshape2)
calc_AUC <- function(obs, pred, plotROC=FALSE) {
roc.pred<-prediction(pred, obs)
if (plotROC) {
roc.perf <- performance(roc.pred, measure="tpr", x.measure="fpr")
plot(roc.perf)
abline(a=0,b=1)
}
return(performance(roc.pred, "auc")@y.values[[1]])
}
df = read.table("data/raw.data", header=FALSE, sep=",", quote='', nrows=250000)
colnames(df) <- c("index", "gameID","date","ConsecutiveWins","TotalDollars","Outcome","PrevDollars","Gender","Age","Name","Occuppation","Location")
# convert outcome to zero/one
df$Outcome[df$Outcome==2]<-0
#try restructuring data
df$ave <- df$TotalDollars/df$ConsecutiveWins
df$TotalDollars_buckets[df$TotalDollars<=15000] <- 'lt15k'
df$TotalDollars_buckets[df$TotalDollars>15000 & df$TotalDollars<=35000] <- '15-35k'
df$TotalDollars_buckets[df$TotalDollars>35000 & df$TotalDollars<=75000] <- '35-75k'
df$TotalDollars_buckets[df$TotalDollars>75000 & df$TotalDollars<=150000] <- '75-150k'
df$TotalDollars_buckets[df$TotalDollars>150000] <- 'gt150k'
df$PrevDollars_buckets[df$PrevDollars<=5000] <- 'lt5k'
df$PrevDollars_buckets[df$PrevDollars>5000 & df$PrevDollars<=15000] <- '5-15k'
df$PrevDollars_buckets[df$PrevDollars>15000 & df$PrevDollars<=25000] <- '15-25k'
df$PrevDollars_buckets[df$PrevDollars>25000 & df$PrevDollars<=35000] <- '25-35k'
df$PrevDollars_buckets[df$PrevDollars>35000] <- 'gt35k'
df$age_bucket[df$Age<=25] <- 'lt25'
df$age_bucket[df$Age>25 & df$Age<=35] <- '25-35'
df$age_bucket[df$Age>35 & df$Age<=45] <- '35-45'
df$age_bucket[df$Age>45 & df$Age<=55] <- '45-55'
df$age_bucket[df$Age>55] <- 'gt55'
df$TotalDollars_buckets <- as.factor(df$TotalDollars_buckets)
df$age_bucket <- as.factor(df$age_bucket)
df$PrevDollars_buckets <- as.factor(df$PrevDollars_buckets)
# Examine data
mean(as.numeric(df$Outcome))
aggregate(df$Outcome, list(Condition=df$ConsecutiveWins), length)
aggregate(df$Outcome, list(Condition=df$ConsecutiveWins), mean)
aggregate(df$Outcome, list(Condition=df$TotalDollars), length)
aggregate(df$Outcome, list(Condition=df$TotalDollars), mean)
aggregate(df$Outcome, list(Condition=df$TotalDollars_buckets), length)
aggregate(df$Outcome, list(Condition=df$TotalDollars_buckets), mean)
aggregate(df$Outcome, list(Condition=df$age_bucket), length)
aggregate(df$Outcome, list(Condition=df$age_bucket), mean)
r <- names(df) %in% c('index','gameID','date','Name','pred')
to <- df[!r]
df$ConsecutiveWins[df$ConsecutiveWins>=10]<-10
df$ConsecutiveWins <- as.factor(df$ConsecutiveWins)
df$ConsecutiveWins <- as.numeric(df$ConsecutiveWins)
r <- names(df) %in% c('index','gameID','date','Name','pred')
to <- df[!r]
sapply(to,function(x)length(levels(as.factor(x))))
bad <- sapply(to,function(x)length(levels(as.factor(x)))<2)
to <- to[!bad]
to$holdout <- runif(nrow(to)) > 0.7
train.data <- to[!to$holdout, ]
validate.data <- to[to$holdout, ]
f <- formula(Outcome ~ ConsecutiveWins + TotalDollars_buckets + PrevDollars_buckets + Gender + age_bucket +
ConsecutiveWins:TotalDollars_buckets + ConsecutiveWins:Gender +
age_bucket:Gender + poly(ConsecutiveWins,3),data=to)
mm <- sparse.model.matrix(f, data=train.data)
cvmn <- cv.glmnet(mm[,-1], train.data$Outcome, family="binomial", standardize=TRUE, nlambda=50,
type.measure="auc", nfold=5,maxit=10000)
plot(cvmn)
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
mm <- model.matrix(f, data=validate.data)
calc_AUC(validate.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "FALSE")
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
mm <- sparse.model.matrix(f, data=train.data)
cvmn <- cv.glmnet(mm[,-1], train.data$Outcome, family="binomial", standardize=TRUE, nlambda=50,
type.measure="auc", nfold=5,maxit=10000)
plot(cvmn)
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
# predict for holdout
mm <- model.matrix(f, data=validate.data)
calc_AUC(validate.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "FALSE")
f <- formula(Outcome ~ ConsecutiveWins + TotalDollars_buckets + PrevDollars_buckets + Gender + age_bucket +
ConsecutiveWins:TotalDollars_buckets + ConsecutiveWins:Gender +
#age_bucket:Gender +
poly(ConsecutiveWins,3),data=to)
mm <- sparse.model.matrix(f, data=train.data)
cvmn <- cv.glmnet(mm[,-1], train.data$Outcome, family="binomial", standardize=TRUE, nlambda=50,
type.measure="auc", nfold=5,maxit=10000)
plot(cvmn)
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
mm <- model.matrix(f, data=validate.data)
calc_AUC(validate.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "FALSE")
f <- formula(Outcome ~ ConsecutiveWins + TotalDollars_buckets + PrevDollars_buckets + Gender + age_bucket +
ConsecutiveWins:TotalDollars_buckets +
#age_bucket:Gender + ConsecutiveWins:Gender +
poly(ConsecutiveWins,3),data=to)
mm <- sparse.model.matrix(f, data=train.data)
cvmn <- cv.glmnet(mm[,-1], train.data$Outcome, family="binomial", standardize=TRUE, nlambda=50,
type.measure="auc", nfold=5,maxit=10000)
plot(cvmn)
coef(cvmn, s=cvmn$lambda.min)    #model coefficients for lambda which minimizes error.
calc_AUC(train.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "TRUE")
#in-sample AUC 0.60
# predict for holdout
mm <- model.matrix(f, data=validate.data)
calc_AUC(validate.data$Outcome, predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min"), "FALSE")
mm <- model.matrix(f, data=df)
df$pred <- predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min")
temp <- df[c('date','Name','pred')]
temp$date <- as.Date(temp$date)
temp$pred <- as.numeric(temp$pred)
ggplot(data=temp,aes(x=date,y=pred,color=Name))+ggtitle('30 Years of Jeopardy!')+
geom_line(size=1,alpha=0.75) + xlab('Date') + ylab('Predicted Win Prob')+scale_colour_discrete(guide=FALSE)
ts <- as.xts(temp, order.by=as.Date(temp$date))
dygraph(ts,main="Model Prediction over Time") %>% dyHighlight(highlightSeriesBackgroundAlpha = 0.5, highlightCircleSize = 0, highlightSeriesOpts = list(strokeWidth = 5),hideOnMouseOut = FALSE) %>% dyLegend(show = "onmouseover")
dygraph(ts,main="Model Prediction over Time") %>% dyHighlight(highlightSeriesBackgroundAlpha = 0.5, highlightCircleSize = 3, highlightSeriesOpts = list(strokeWidth = 1),hideOnMouseOut = FALSE) %>% dyLegend(show = "onmouseover")
dygraph(ts,main="Model Prediction over Time") %>% dyHighlight(highlightSeriesBackgroundAlpha = 0.5, highlightCircleSize = 5, highlightSeriesOpts = list(strokeWidth = 1),hideOnMouseOut = FALSE) %>% dyLegend(show = "onmouseover")
ggplot(date=df,aes=(x=df$pred))+geom_histogram()+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(date=df,aes(x=pred))+geom_histogram()+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(date=df,aes(pred))+geom_histogram()+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
head(df)
mm <- model.matrix(f, data=df)
df$pred <- predict(cvmn, newx=mm[,-1], type="response", s = "lambda.min")
head(df)
df$pred
ggplot(date=df,aes(pred))
ggplot(data=df,aes(pred))+geom_histogram()+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(pred))+geom_histogram(bins=20)+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(pred))+geom_histogram(bins=10)+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
names(df)
ggplot(data=df,aes(pred,fill=ConsecutiveWins))+geom_histogram(bins=10)+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(pred,color=ConsecutiveWins))+geom_histogram(bins=10)+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(x=pred,color=ConsecutiveWins))+geom_histogram(bins=10)+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(x=pred,file=ConsecutiveWins,color=ConsecutiveWins))+geom_histogram(bins=10,position=position.dodge)+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(x=pred,file=ConsecutiveWins,color=ConsecutiveWins))+geom_histogram(bins=10,position.dodge)+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(x=pred,file=ConsecutiveWins,color=ConsecutiveWins))+geom_histogram(bins=10,position_dodge)+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(x=pred,file=ConsecutiveWins,color=ConsecutiveWins))+geom_histogram(bins=10,position=position_dodge)+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(x=pred,file=ConsecutiveWins,color=ConsecutiveWins))+geom_histogram(bins=10,position="dodge")+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(x=pred,fill=ConsecutiveWins,color=ConsecutiveWins))+geom_histogram(bins=10,position="dodge")+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
head(df)
tail(ConsecutiveWins)
tail(df$ConsecutiveWins)
ggplot(data=df,aes(x=pred,fill=ConsecutiveWins,color=ConsecutiveWins))+geom_histogram(bins=20,position="dodge")+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(x=pred,fill=ConsecutiveWins))+geom_histogram(bins=20,position="dodge")+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(pred,fill=ConsecutiveWins))+geom_histogram(bins=20,position="dodge")+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(pred,fill=ConsecutiveWins))+geom_histogram(binwidth=0.05,position="dodge")+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
head(df)
ggplot(data=df,aes(pred,fill=as.factor(ConsecutiveWins)))+geom_histogram(binwidth=0.05,position="dodge")+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(pred,fill=as.factor(TotalDollars_buckets)))+geom_histogram(binwidth=0.05,position="dodge")+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
ggplot(data=df,aes(pred,fill=as.factor(TotalDollars_buckets)))+geom_histogram(binwidth=0.05,position="dodge")+xlab('Predicted Probability')+ggtitle('Distribution of Predictions')
temp$date <- as.Date(temp$date)
df$date <- as.Date(df$date)
ggplot(data=df,aes(x=date,y=pred,color=Name))+ggtitle('30 Years of Jeopardy!')+
geom_line(size=1,alpha=0.75) + xlab('Date') + ylab('Predicted Win Prob')+scale_colour_discrete(guide=FALSE)
ts <- as.xts(df[c('date','Name','pred')], order.by=as.Date(df[c('date','Name','pred')]$date))
dygraph(ts,main="Model Prediction over Time") %>% dyHighlight(highlightSeriesBackgroundAlpha = 0.5, highlightCircleSize = 5, highlightSeriesOpts = list(strokeWidth = 1),hideOnMouseOut = FALSE) %>% dyLegend(show = "onmouseover")
